name: X86_64 Mini OpenWrt

on:
  workflow_dispatch:
  schedule:
    - cron: 0 18 * * *  # UTC时间18点，北京时间次日2点

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: configs/x86_64-mini.config
  DIY_SCRIPT: diy-mini.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120  # 增加超时限制

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive  # 确保克隆子模块

    - name: Check Server Performance
      run: |
        echo "⚠️ 性能警告：服务器资源有限，插件过多可能导致编译失败"
        echo -e "\n----- CPU Info -----"
        lscpu | grep -E "Model name|Core(s) per socket"
        echo -e "\n----- Memory Info -----"
        free -h
        echo -e "\n----- Disk Space -----"
        df -hT $GITHUB_WORKSPACE

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby*
        sudo apt-get autoremove --purge -y
        sudo apt-get clean
        sudo apt-get update
        sudo apt-get install -y $(curl -fsSL https://is.gd/depends_ubuntu_2204) ccache
        sudo timedatectl set-timezone "$TZ"

    - name: Clone Source Code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        # 获取源码元数据
        echo "COMMIT_INFO=$(git log -1 --format='%h by %an on %cd: %s')" >> $GITHUB_ENV

    - name: Generate Build Config
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig
        # 提取目标信息
        echo "TARGET_PROFILE=$(awk -F '[="]+' '/CONFIG_TARGET_BOARD/{print $2}' .config)" >> $GITHUB_ENV
        echo "TARGET_SUBTARGET=$(awk -F '[="]+' '/CONFIG_TARGET_SUBTARGET/{print $2}' .config)" >> $GITHUB_ENV

    - name: Cache Optimization
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.OPENWRT_PATH }}/dl
          ${{ env.OPENWRT_PATH }}/build_dir/host
          /usr/local/ccache
        key: ${{ runner.os }}-build-${{ env.TARGET_PROFILE }}-${{ hashFiles('configs/*.config') }}

    - name: Install Feeds
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Apply Customizations
      run: |
        [ -d files ] && cp -r files $OPENWRT_PATH/
        chmod +x $GITHUB_WORKSPACE/scripts/*.sh
        cd $OPENWRT_PATH
        # 执行自定义脚本
        bash $GITHUB_WORKSPACE/$DIY_SCRIPT
        bash $GITHUB_WORKSPACE/scripts/preset-clash-core.sh $CLASH_KERNEL
        bash $GITHUB_WORKSPACE/scripts/preset-terminal-tools.sh

    - name: Download Packages
      run: |
        cd $OPENWRT_PATH
        make -j8 download
        find dl -size -4k -delete  # 清理无效小文件

    - name: Compile Firmware
      timeout-minutes: 90  # 单独设置编译超时
      run: |
        cd $OPENWRT_PATH
        echo "CONFIG_CCACHE=y" >> .config
        make -j$(($(nproc)+1)) || make -j1 V=s  # 智能并行编译
        echo "status=success" >> $GITHUB_OUTPUT
        echo "BUILD_DATE=$(date +'%Y.%m.%d')" >> $GITHUB_ENV

    - name: Post-build Processing
      if: success()
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        rm -rf packages *.manifest
        rename "s/^openwrt/mini-openwrt-$BUILD_DATE/" *
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

    - name: Upload Artifact
      if: env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: openwrt-bin-${{ env.BUILD_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: Create Release
      if: env.FIRMWARE_RELEASE == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.BUILD_DATE }}
        name: "Build ${{ env.BUILD_DATE }}"
        body: |
          ### 🚀 OpenWrt Build Details
          - **Platform**: ${{ env.TARGET_PROFILE }}
          - **Source**: [$REPO_BRANCH]($REPO_URL)
          - **Build Date**: ${{ env.BUILD_DATE }}
          - **Commit**: ${{ env.COMMIT_INFO }}
        files: ${{ env.FIRMWARE_PATH }}/*
